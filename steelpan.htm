<!DOCTYPE html>
<html>
 <head>
  <title>Steel-pan Simulator by CMG Lee</title>
  <style type="text/css">
body { background:#333; }
svg  { position:fixed; top:0; left:0; height:100%; width:100% }
  </style>
 </head>
 <body>

<svg version="1.1" xmlns="http://www.w3.org/2000/svg"
             xmlns:xlink="http://www.w3.org/1999/xlink"
     width="100%" height="100%" viewBox="-256 -256 512 512">
 <title>Steel-pan Simulator by CMG Lee</title>
 <style type="text/css">
svg         { font-family:Helvetica,Arial,sans-serif; font-size:40px;
              text-anchor:middle; fill:#000; }
text        { stroke:none; pointer-events:none; }
.note       { letter-spacing:-2px; fill:url(#grad_note); }
.note:hover { filter:url(#filter_hover); }
 </style>
 <defs>
  <filter id="filter_hover">
   <feColorMatrix type="matrix"
                  values="0.5,0,0,0,0 0,0.5,0,0,0 0,0,0.5,0,0 0,0,0,1,0"/>
  </filter>
  <radialGradient id="grad_note" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
   <stop offset="50%" stop-color="#fff"/>
   <stop offset="90%" stop-color="#ccc"/>
  </radialGradient>
  <circle id="pan" cx="0" cy="0" r="255"/>
 </defs>
 <clipPath id="clip_pan">
  <use xlink:href="#pan"/>
 </clipPath>
 <use xlink:href="#pan" fill="url(#grad_note)"/>
 <g id="notes" clip-path="url(#clip_pan)"></g>
 <script type="text/ecmascript"><![CDATA[ /// so needn't use &lt; for < etc
  function playNotes(frequencys, durations, type='triangle') {
   const audioContext = new AudioContext();
   const oscillator   = audioContext.createOscillator();
   const gain         = audioContext.createGain();
   var   now          = audioContext.currentTime;
   oscillator.connect(gain).connect(audioContext.destination);
   oscillator.type = type;
   if (frequencys.constructor !== Array) { frequencys = [frequencys]; }
   if (durations .constructor !== Array) { durations  = [durations ]; }
   var duration;
   for (var i = 0; i < frequencys.length; ++i) {
    var frequency = frequencys[i];
    if (i < durations.length) { duration = durations[i]; }
    if (duration > 0) { /// avoid click if last note is not played
     gain.gain.exponentialRampToValueAtTime(
      Math.min(1, Math.sqrt(110 / frequency)) *
      (type == 'sawtooth' ? 0.25 : type == 'square' ? 0.5 : 1), now);
     gain.gain.exponentialRampToValueAtTime(1e-3, now + duration - 1e-3);
    }
    oscillator.frequency.exponentialRampToValueAtTime(frequency, now);
    now += duration;
   }
   oscillator.start();
   oscillator.stop(now);
  }
  const data_ringss  = [
   {'n_note':12,'rx_note':59,'ry_note':70,'r_ring':230,'step':7,'font':40},
   {'n_note':12,'rx_note':31,'ry_note':40,'r_ring':120,'step':7,'font':35},
   {'n_note': 5,'rx_note':27,'ry_note':32,'r_ring': 49,'step':3,'font':30},
  ];
  const label_notes  = ['C','C#','D','Eb','E','F','F#','G','Ab','A','Bb','B'];
  const suffix_rings = ['', '&#8242;', '&#8243;'];
  const out_notes    = [];
  var   frequency    = 440 / Math.pow(2, 0.75); /// concert middle-C
  for  (let i_ring = 0; i_ring < data_ringss.length; ++i_ring) {
   const data_rings = data_ringss[i_ring];
   const n_note     = data_rings['n_note'];
   for (let i_note = 0; i_note < n_note; ++i_note) {
    const deg   = (360.0 * (i_note * data_rings['step']) /
                   n_note).toFixed(0) % 360;
    const label = label_notes[i_note].replace('#', '&#9839;').
                   replace('b', '&#9837;') + suffix_rings[i_ring];
    // log(i_ring, i_note, deg);
    out_notes.push(`
<g class="note" transform="rotate(-${deg}) translate(0,${data_rings['r_ring']})"
                onmousedown="playNotes([${frequency}], [1]);">
 <ellipse rx="${data_rings['rx_note']}" ry="${data_rings['ry_note']}"/>
 <text transform="rotate(${deg})" y="0.7ex"
       font-size="${data_rings['font']}" fill="#000">${label}</text>
</g>`);
    frequency *= Math.pow(2, 1.0 / 12);
   }
  }
  document.getElementById('notes').innerHTML = out_notes.join();
 ]]></script>
</svg>

 </body>
</html>
