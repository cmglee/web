<html>
 <head>
  <title>Mic trigger</title>
  <style>
body, input { text-align:center; font-size:160%; }
  </style>
 </head>
 <body>
  <form onSubmit="return false;">
   <input type="button" value="mic trigger" onclick="beginDetect();" />
   <br /><input type="radio" name="threshold" id="t01" value="0.01" /><label for="t01">0.01</label>
         <input type="radio" name="threshold" id="t02" value="0.02" /><label for="t02">0.02</label>
   <br /><input type="radio" name="threshold" id="t03" value="0.03" /><label for="t03">0.03</label>
         <input type="radio" name="threshold" id="t04" value="0.04" /><label for="t04">0.04</label>
   <br /><input type="radio" name="threshold" id="t05" value="0.05" checked="checked" /><label for="t05">0.05</label>
         <input type="radio" name="threshold" id="t07" value="0.07" /><label for="t07">0.07</label>
   <br /><input type="radio" name="threshold" id="t10" value="0.10" /><label for="t10">0.10</label>
         <input type="radio" name="threshold" id="t20" value="0.20" /><label for="t20">0.20</label>
   <br /><input type="radio" name="threshold" id="t30" value="0.30" /><label for="t30">0.30</label>
         <input type="radio" name="threshold" id="t50" value="0.50" /><label for="t50">0.50</label>
   <div id="audio-value"></div>
  </form>
  <script>
// const audio       = new Audio('ya_tidur.mp3');
const audio          = new Audio('data:audio/mp3;base64,');
const secCooldown    = 10;
const countToTrigger = 100;
var   countTrigger   = 0;
var   msPrevious     = 0;
const elThreshold    = document.forms[0].threshold;

/// Based on http://stackoverflow.com/a/51859377
var audioContext;
var mediaStreamSource = null
var meter = null

function beginDetect() {
  audio.play();
  audioContext = new (window.AudioContext || window.webkitAudioContext)()
  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    navigator.mediaDevices.getUserMedia({audio: true}).then((stream) => {
      mediaStreamSource = audioContext.createMediaStreamSource(stream)
      meter = createAudioMeter(audioContext)
      mediaStreamSource.connect(meter)
    })
  }
}

function createAudioMeter(audioContext, clipLevel, averaging, clipLag) {
  const processor = audioContext.createScriptProcessor(512)
  processor.onaudioprocess = volumeAudioProcess
  processor.clipping = false
  processor.lastClip = 0
  processor.volume = 0
  processor.clipLevel = clipLevel || 0.98
  processor.averaging = averaging || 0.95
  processor.clipLag = clipLag || 750

  // this will have no effect, since we don't copy the input to the output,
  // but works around a current Chrome bug.
  processor.connect(audioContext.destination)

  processor.checkClipping = function () {
    if (!this.clipping) {
      return false
    }
    if ((this.lastClip + this.clipLag) < window.performance.now()) {
      this.clipping = false
    }
    return this.clipping
  }

  processor.shutdown = function () {
    this.disconnect()
    this.onaudioprocess = null
  }

  return processor
}

function volumeAudioProcess(event) {
  const buf = event.inputBuffer.getChannelData(0)
  const bufLength = buf.length
  let sum = 0
  let x
  // Do a root-mean-square on the samples: sum up the squares...
  for (var i = 0; i < bufLength; i++) {
    x = buf[i]
    if (Math.abs(x) >= this.clipLevel) {
        this.clipping = true
        this.lastClip = window.performance.now()
    }
    sum += x * x
  }

  // ... then take the square root of the sum.
  const rms = Math.sqrt(sum / bufLength)

  // Now smooth this out with the averaging factor applied
  // to the previous sample - take the max here because we
  // want "fast attack, slow release."
  this.volume = Math.max(rms, this.volume * this.averaging) + 0;
  const threshold = parseFloat(elThreshold.value);
  const isDetect = this.volume > threshold;
  if (isDetect) {
    countTrigger += 1;
    if (countTrigger >= countToTrigger) {
      countTrigger = 0;
      const ms = (new Date()).getTime();
      if (ms - msPrevious > 1000 * secCooldown) {
        msPrevious = ms;
        audio.play();
      }
    }
  }
  console.log(threshold, countTrigger, msPrevious, this.volume, isDetect);
  document.getElementById('audio-value').innerHTML = this.volume.toFixed(4) + '<br />' + '-'.repeat(1e3 * this.volume);
}
  </script>
 </body>
</html>
